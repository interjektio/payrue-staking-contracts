{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakingToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_rewardNumerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_rewardDenominator",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "EmergencyWithdrawalInitiated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Unstaked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "availableToReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rewardable",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "availableToStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "stakeable",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "availableToStakeOrReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "stakeable",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdrawalInProgress",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "forceExitUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initiateEmergencyWithdrawal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockedPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minStakeAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "payRewardToUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "rewardClaimable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardDenominator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardNumerator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMinStakeAmount",
          "type": "uint256"
        }
      ],
      "name": "setMinStakeAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "newPaused",
          "type": "bool"
        }
      ],
      "name": "setPaused",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "staked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAmountStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalGuaranteedReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalLockedReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "locked",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStoredReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "yieldPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4749bf9ecdf5f752c58ca42d4fb96ecc9a192fdbb01cb9e07204b26950c3a46d",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "2095432",
    "logsBloom": "0x
    "blockHash": "0xa58ea0157492f2cb9c5c2fa0bf9b8f4c63e3ec7976c0cee97e5159bd07fd8c7c",
    "transactionHash": "0x4749bf9ecdf5f752c58ca42d4fb96ecc9a192fdbb01cb9e07204b26950c3a46d",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0x4749bf9ecdf5f752c58ca42d4fb96ecc9a192fdbb01cb9e07204b26950c3a46d",
        "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xa58ea0157492f2cb9c5c2fa0bf9b8f4c63e3ec7976c0cee97e5159bd07fd8c7c"
      }
    ],
    "blockNumber": 1,
    "cumulativeGasUsed": "2095432",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0000000000000000000000000000000000000000",
    "0x0000000000000000000000000000000000000000",
    1,
    1
  ],
  "solcInputHash": "cb2582d2f0806a3ea2b77762278320c4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardDenominator\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EmergencyWithdrawalInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"availableToReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardable\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableToStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeable\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableToStakeOrReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeable\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdrawalInProgress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"forceExitUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initiateEmergencyWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minStakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"payRewardToUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"rewardClaimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinStakeAmount\",\"type\":\"uint256\"}],\"name\":\"setMinStakeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newPaused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"staked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAmountStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalGuaranteedReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLockedReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"locked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStoredReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PayRueStaking.sol\":\"PayRueStaking\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x1278c76b840063ff5e14a2d7c5707812c1eabc2342ed040bf862c2d7552102fe\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"contracts/PayRueStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/**\\n* The PayRue Staking Contract\\n*\\n* Features and assumptions:\\n* - Users stake token A and receive token B. These can be same or different tokens.\\n* - APY is configurable with rewardNumerator/rewardDenominator -- with 1 and 1 it's 100%, which means\\n    you stake 10 000 PROPEL, you get 10 000 PROPEL as rewards during the next year\\n* - Each stake is guaranteed the reward in 365 days, after which they can still get new rewards if\\n*   there is reward money left in the contract. If the reward cannot be guaranteed, the stake will not be accepted.\\n* - Each stake is locked for 365 days, after which it can be unstaked or left in the contract\\n*/\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract PayRueStaking is ReentrancyGuard, Ownable {\\n    event Staked(\\n        address indexed user,\\n        uint256 amount\\n    );\\n\\n    event Unstaked(\\n        address indexed user,\\n        uint256 amount\\n    );\\n\\n    event RewardPaid(\\n        address indexed user,\\n        uint256 amount\\n    );\\n\\n    event EmergencyWithdrawalInitiated();\\n\\n    struct Stake {\\n        uint256 amount;\\n        uint256 timestamp;\\n    }\\n\\n    struct UserStakingData {\\n        uint256 amountStaked;\\n        uint256 guaranteedReward;\\n        uint256 storedReward;\\n        uint256 storedRewardUpdatedOn;\\n        uint256 firstActiveStakeIndex; // for gas optimization if many stakes\\n        Stake[] stakes;\\n    }\\n\\n    uint256 public constant lockedPeriod = 365 days;\\n    uint256 public constant yieldPeriod = 365 days;\\n\\n    IERC20 public stakingToken;\\n    IERC20 public rewardToken;\\n    bool internal _stakingTokenIsRewardToken;\\n    uint256 public rewardNumerator;\\n    uint256 public rewardDenominator;\\n\\n    uint256 public minStakeAmount = 10_000 ether; // should be at least 1\\n    bool public emergencyWithdrawalInProgress = false;\\n    bool public paused = false;\\n\\n    mapping(address => UserStakingData) stakingDataByUser;\\n\\n    uint256 public totalAmountStaked = 0;\\n    uint256 public totalGuaranteedReward = 0;\\n    uint256 public totalStoredReward = 0;\\n\\n    constructor(\\n        address _stakingToken,\\n        address _rewardToken,\\n        uint256 _rewardNumerator,\\n        uint256 _rewardDenominator\\n    )\\n    Ownable()\\n    {\\n        require(_rewardNumerator != 0, \\\"Reward numerator cannot be 0\\\");  // would mean zero reward\\n        require(_rewardDenominator != 0, \\\"Reward denominator cannot be 0\\\");  // would mean division by zero\\n\\n        stakingToken = IERC20(_stakingToken);\\n        rewardToken = IERC20(_rewardToken);\\n        _stakingTokenIsRewardToken = _stakingToken == _rewardToken;\\n\\n        rewardNumerator = _rewardNumerator;\\n        rewardDenominator = _rewardDenominator;\\n    }\\n\\n    // PUBLIC USER API\\n    // ===============\\n\\n    function stake(\\n        uint256 amount\\n    )\\n    public\\n    virtual\\n    nonReentrant\\n    {\\n        require(!paused, \\\"Staking is temporarily paused, no new stakes accepted\\\");\\n        require(!emergencyWithdrawalInProgress, \\\"Emergency withdrawal in progress, no new stakes accepted\\\");\\n        require(amount >= minStakeAmount, \\\"Minimum stake amount not met\\\");\\n        // This needs to be checked before accepting the stake, in case stakedToken and rewardToken are the same\\n        require(\\n            availableToStake() >= amount,\\n            \\\"Not enough rewards left to accept new stakes for given amount\\\"\\n        );\\n        require(\\n            stakingToken.transferFrom(msg.sender, address(this), amount),\\n            \\\"Cannot transfer balance\\\"\\n        );\\n\\n        UserStakingData storage userData = stakingDataByUser[msg.sender];\\n\\n        // Update stored reward, in case the user has already staked\\n        _updateStoredReward(userData);\\n\\n        userData.stakes.push(Stake({\\n            amount: amount,\\n            timestamp: block.timestamp\\n        }));\\n        userData.amountStaked += amount;\\n        totalAmountStaked += amount;\\n\\n        uint256 rewardAmount = amount * rewardNumerator / rewardDenominator;\\n        require(rewardAmount > 0, \\\"Zero reward amount\\\");\\n\\n        userData.guaranteedReward += rewardAmount;\\n        totalGuaranteedReward += rewardAmount;\\n        userData.storedRewardUpdatedOn = block.timestamp;  // may waste some gas, but would rather be safe than sorry\\n\\n        emit Staked(\\n            msg.sender,\\n            amount\\n        );\\n    }\\n\\n    function claimReward()\\n    public\\n    virtual\\n    nonReentrant\\n    {\\n        _rewardUser(msg.sender);\\n    }\\n\\n    function unstake(\\n        uint256 amount\\n    )\\n    public\\n    virtual\\n    nonReentrant\\n    {\\n        _unstakeUser(msg.sender, amount);\\n    }\\n\\n    function exit()\\n    public\\n    virtual\\n    nonReentrant\\n    {\\n        UserStakingData storage userData = stakingDataByUser[msg.sender];\\n        if (userData.amountStaked > 0) {\\n            _unstakeUser(msg.sender, userData.amountStaked);\\n        }\\n        _rewardUser(msg.sender);\\n        delete stakingDataByUser[msg.sender];\\n    }\\n\\n    // PUBLIC VIEWS AND UTILITIES\\n    // ==========================\\n\\n    function availableToStake()\\n    public\\n    view\\n    returns (uint256 stakeable)\\n    {\\n        stakeable = rewardToken.balanceOf(address(this)) - totalLockedReward();\\n        if (_stakingTokenIsRewardToken) {\\n            stakeable -= totalAmountStaked;\\n        }\\n        stakeable = stakeable * rewardDenominator / rewardNumerator;\\n    }\\n\\n    function availableToReward()\\n    public\\n    view\\n    returns (uint256 rewardable)\\n    {\\n        rewardable = rewardToken.balanceOf(address(this)) - totalLockedReward();\\n        if (_stakingTokenIsRewardToken) {\\n            rewardable -= totalAmountStaked;\\n        }\\n    }\\n\\n    function availableToStakeOrReward()\\n    public\\n    view\\n    returns (uint256 stakeable)\\n    {\\n        // NOTE: this is a misnomer if rewardNumerator/rewardDenominator != 1, thus it's deprecated and only for\\n        // backwards compatibility\\n        stakeable = availableToStake();\\n    }\\n\\n    function totalLockedReward()\\n    public\\n    view\\n    returns (uint256 locked)\\n    {\\n        locked = totalStoredReward + totalGuaranteedReward;\\n    }\\n\\n    function rewardClaimable(\\n        address user\\n    )\\n    public\\n    view\\n    returns (uint256 reward)\\n    {\\n        UserStakingData storage userData = stakingDataByUser[user];\\n        reward = userData.storedReward;\\n        reward += _calculateStoredRewardToAdd(userData);\\n    }\\n\\n    function staked(\\n        address user\\n    )\\n    public\\n    view\\n    returns (uint256 amount)\\n    {\\n        UserStakingData storage userData = stakingDataByUser[user];\\n        return userData.amountStaked;\\n    }\\n\\n    // OWNER API\\n    // =========\\n\\n    function payRewardToUser(\\n        address user\\n    )\\n    public\\n    virtual\\n    onlyOwner\\n    nonReentrant\\n    {\\n        _rewardUser(user);\\n    }\\n\\n    function withdrawTokens(\\n        address token,\\n        uint256 amount\\n    )\\n    public\\n    virtual\\n    onlyOwner\\n    nonReentrant\\n    {\\n        if (token == address(rewardToken)) {\\n            require(amount <= availableToReward(), \\\"Can only withdraw up to balance minus locked amount\\\");\\n        } else if (token == address(stakingToken)) {\\n            uint256 maxAmount = stakingToken.balanceOf(address(this)) - totalAmountStaked;\\n            require(amount <= maxAmount, \\\"Cannot withdraw staked tokens\\\");\\n        }\\n        IERC20(token).transfer(msg.sender, amount);\\n    }\\n\\n    function setMinStakeAmount(\\n        uint256 newMinStakeAmount\\n    )\\n    public\\n    virtual\\n    onlyOwner\\n    nonReentrant\\n    {\\n        require(newMinStakeAmount > 1, \\\"Minimum stake amount must be at least 1\\\");\\n        minStakeAmount = newMinStakeAmount;\\n    }\\n\\n    function setPaused(\\n        bool newPaused\\n    )\\n    public\\n    virtual\\n    onlyOwner\\n    nonReentrant\\n    {\\n        paused = newPaused;\\n    }\\n\\n    function initiateEmergencyWithdrawal()\\n    public\\n    virtual\\n    onlyOwner\\n    nonReentrant\\n    {\\n        require(!emergencyWithdrawalInProgress, \\\"Emergency withdrawal already in progress\\\");\\n        emergencyWithdrawalInProgress = true;\\n        emit EmergencyWithdrawalInitiated();\\n    }\\n\\n    function forceExitUser(\\n        address user\\n    )\\n    public\\n    virtual\\n    onlyOwner\\n    nonReentrant\\n    {\\n        // NOTE: this pays all of guaranteed reward to the user, even ahead of schedule with humongous APY!\\n        require(emergencyWithdrawalInProgress, \\\"Emergency withdrawal not in progress\\\");\\n        UserStakingData storage userData = stakingDataByUser[user];\\n        if (userData.amountStaked > 0) {\\n            totalAmountStaked -= userData.amountStaked;\\n            stakingToken.transfer(user, userData.amountStaked);\\n            emit Unstaked(\\n                user,\\n                userData.amountStaked\\n            );\\n            //userData.amountStaked = 0;\\n        }\\n        uint256 userReward = userData.storedReward + userData.guaranteedReward;\\n        if (userReward > 0) {\\n            rewardToken.transfer(user, userReward);\\n            totalStoredReward -= userData.storedReward;\\n            totalGuaranteedReward -= userData.guaranteedReward;\\n            emit RewardPaid(\\n                user,\\n                userReward\\n            );\\n            //userData.storedReward = 0;\\n            //userData.guaranteedReward = 0;\\n        }\\n        // delete the whole thing to set everything as 0 and to save on gas\\n        delete stakingDataByUser[user];\\n    }\\n\\n    // INTERNAL API\\n    // ============\\n\\n    function _rewardUser(\\n        address user\\n    )\\n    internal\\n    {\\n        UserStakingData storage userData = stakingDataByUser[user];\\n        _updateStoredReward(userData);\\n\\n        uint256 reward = userData.storedReward;\\n        if (reward == 0) {\\n            return;\\n        }\\n\\n        userData.storedReward = 0;\\n        totalStoredReward -= reward;\\n\\n        require(\\n            rewardToken.transfer(user, reward),\\n            \\\"Sending reward failed\\\"\\n        );\\n\\n        emit RewardPaid(\\n            user,\\n            reward\\n        );\\n    }\\n\\n    function _unstakeUser(\\n        address user,\\n        uint256 amount\\n    )\\n    private\\n    {\\n        require(amount > 0, \\\"Cannot unstake zero amount\\\");\\n\\n        UserStakingData storage userData = stakingDataByUser[user];\\n        _updateStoredReward(userData);\\n\\n        uint256 amountLeft = amount;\\n\\n        uint256 i = userData.firstActiveStakeIndex;\\n        for (; i < userData.stakes.length; i++) {\\n            if (userData.stakes[i].amount == 0) {\\n                continue;\\n            }\\n\\n            require(\\n                userData.stakes[i].timestamp <= block.timestamp - lockedPeriod,\\n                \\\"Unstaking is only allowed after the locked period has expired\\\"\\n            );\\n            if (userData.stakes[i].amount > amountLeft) {\\n                userData.stakes[i].amount -= amountLeft;\\n                amountLeft = 0;\\n                break;\\n            } else {\\n                // stake amount equal to or smaller than amountLeft\\n                amountLeft -= userData.stakes[i].amount;\\n                userData.stakes[i].amount = 0;\\n                delete userData.stakes[i];  // this should be safe and saves a little bit of gas, but also leaves a gap in the array\\n            }\\n        }\\n\\n        require(\\n            amountLeft == 0,\\n            \\\"Not enough staked balance left to unstake all of wanted amount\\\"\\n        );\\n\\n        userData.firstActiveStakeIndex = i;\\n        userData.amountStaked -= amount;\\n        totalAmountStaked -= amount;\\n\\n        // We need to make sure the user is left with no guaranteed reward if they have unstaked everything\\n        // -- in that case, just add to stored reward.\\n        if (userData.guaranteedReward > 0 && i == userData.stakes.length) {\\n            userData.storedReward += userData.guaranteedReward;\\n            totalStoredReward += userData.guaranteedReward;\\n\\n            totalGuaranteedReward -= userData.guaranteedReward;\\n            userData.guaranteedReward = 0;\\n\\n            userData.storedRewardUpdatedOn = block.timestamp;\\n        }\\n\\n        require(\\n            stakingToken.transfer(msg.sender, amount),\\n            \\\"Transferring staked token back to sender failed\\\"\\n        );\\n\\n        emit Unstaked(\\n            msg.sender,\\n            amount\\n        );\\n    }\\n\\n    function _updateStoredReward(\\n        UserStakingData storage userData\\n    )\\n    internal\\n    {\\n        uint256 addedStoredReward = _calculateStoredRewardToAdd(userData);\\n        if (addedStoredReward != 0) {\\n            userData.storedReward += addedStoredReward;\\n            totalStoredReward += addedStoredReward;\\n            if (addedStoredReward > userData.guaranteedReward) {\\n                totalGuaranteedReward -= userData.guaranteedReward;\\n                userData.guaranteedReward = 0;\\n            } else {\\n                userData.guaranteedReward -= addedStoredReward;\\n                totalGuaranteedReward -= addedStoredReward;\\n            }\\n            userData.storedRewardUpdatedOn = block.timestamp;\\n        }\\n    }\\n\\n    function _calculateStoredRewardToAdd(\\n        UserStakingData storage userData\\n    )\\n    internal\\n    view\\n    returns (uint256 storedRewardToAdd) {\\n        if (userData.storedRewardUpdatedOn == 0 || userData.storedRewardUpdatedOn == block.timestamp) {\\n            // safety check -- don't want to accidentally multiply everything by the unix epoch instead of time passed\\n            return 0;\\n        }\\n        uint256 timePassedFromLastUpdate = block.timestamp - userData.storedRewardUpdatedOn;\\n        storedRewardToAdd = (userData.amountStaked * rewardNumerator * timePassedFromLastUpdate / rewardDenominator) / yieldPeriod;\\n\\n        // We can pay out more than guaranteed, but only if we have enough non-locked funds for it\\n        if (storedRewardToAdd > userData.guaranteedReward) {\\n            uint256 excess = storedRewardToAdd - userData.guaranteedReward;\\n            uint256 available = availableToReward();\\n            if (excess > available) {\\n                storedRewardToAdd = storedRewardToAdd - excess + available;\\n            }\\n        }\\n    }\\n}\",\"keccak256\":\"0xc2674ce098ca79171838b3977afaa2329dd3f69b575e01a6ee88a19a7f240af3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405269021e19e0c9bab24000006006556007805461ffff1916905560006009819055600a819055600b553480156200003957600080fd5b506040516200243f3803806200243f8339810160408190526200005c91620001b3565b6001600081815581546001600160a01b031916339081179092556040518291907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35081620000f55760405162461bcd60e51b815260206004820152601c60248201527f526577617264206e756d657261746f722063616e6e6f7420626520300000000060448201526064015b60405180910390fd5b80620001445760405162461bcd60e51b815260206004820152601e60248201527f5265776172642064656e6f6d696e61746f722063616e6e6f74206265203000006044820152606401620000ec565b600280546001600160a01b0319166001600160a01b03958616908117909155600380546001600160a81b031916949095169384179314600160a01b0292909217909255600491909155600555620001fa565b80516001600160a01b0381168114620001ae57600080fd5b919050565b60008060008060808587031215620001c9578384fd5b620001d48562000196565b9350620001e46020860162000196565b6040860151606090960151949790965092505050565b612235806200020a6000396000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c80638da5cb5b1161010f578063dedfbbfa116100a2578063f188768411610071578063f18876841461039a578063f2fde38b146103a3578063f7c618c1146103b6578063fe961f61146103c957600080fd5b8063dedfbbfa14610350578063e8c33f631461036c578063e9fad8ee1461037f578063eb4af0451461038757600080fd5b8063aeec96fa116100de578063aeec96fa14610343578063b3d6e11914610350578063b88a802f1461035b578063cdd432d01461036357600080fd5b80638da5cb5b146102ee57806398807d84146102ff5780639a90a8e114610328578063a694fc3a1461033057600080fd5b80633f90855111610187578063715018a611610156578063715018a6146102a9578063728d2b6a146102b157806372f702f3146102ba5780638509a001146102e557600080fd5b80633f908551146102595780634ff09273146102615780635c2939c7146102745780635c975abb1461028757600080fd5b806316c38b3c116101c357806316c38b3c1461022257806317653e07146102355780632e17de781461023d578063315a82f91461025057600080fd5b806302653a6b146101ea57806302c3ef3b1461020557806306b091f91461020d575b600080fd5b6101f26103d2565b6040519081526020015b60405180910390f35b6101f26103e9565b61022061021b3660046120c1565b61049d565b005b6102206102303660046120ea565b61076a565b6101f2610836565b61022061024b366004612122565b610840565b6101f2600a5481565b6101f26108aa565b61022061026f3660046120a7565b610978565b6102206102823660046120a7565b610d0f565b60075461029990610100900460ff1681565b60405190151581526020016101fc565b610220610dca565b6101f2600b5481565b6002546102cd906001600160a01b031681565b6040516001600160a01b0390911681526020016101fc565b6101f260055481565b6001546001600160a01b03166102cd565b6101f261030d3660046120a7565b6001600160a01b031660009081526008602052604090205490565b610220610e7b565b61022061033e366004612122565b610fe3565b6007546102999060ff1681565b6101f26301e1338081565b61022061145e565b6101f260045481565b6101f261037a3660046120a7565b6114c6565b6102206114fe565b610220610395366004612122565b6115be565b6101f260065481565b6102206103b13660046120a7565b6116f0565b6003546102cd906001600160a01b031681565b6101f260095481565b6000600a54600b546103e49190612152565b905090565b60006103f36103d2565b6003546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561043657600080fd5b505afa15801561044a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046e919061213a565b61047891906121a9565b600354909150600160a01b900460ff161561049a576009546103e490826121a9565b90565b6001546001600160a01b031633146104fc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6002600054141561054f5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104f3565b60026000556003546001600160a01b03838116911614156105ec576105726103e9565b8111156105e75760405162461bcd60e51b815260206004820152603360248201527f43616e206f6e6c7920776974686472617720757020746f2062616c616e63652060448201527f6d696e7573206c6f636b656420616d6f756e740000000000000000000000000060648201526084016104f3565b6106e0565b6002546001600160a01b03838116911614156106e0576009546002546040516370a0823160e01b8152306004820152600092916001600160a01b0316906370a082319060240160206040518083038186803b15801561064a57600080fd5b505afa15801561065e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610682919061213a565b61068c91906121a9565b9050808211156106de5760405162461bcd60e51b815260206004820152601d60248201527f43616e6e6f74207769746864726177207374616b656420746f6b656e7300000060448201526064016104f3565b505b60405163a9059cbb60e01b8152336004820152602481018290526001600160a01b0383169063a9059cbb90604401602060405180830381600087803b15801561072857600080fd5b505af115801561073c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107609190612106565b5050600160005550565b6001546001600160a01b031633146107c45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104f3565b600260005414156108175760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104f3565b600780549115156101000261ff00199092169190911790556001600055565b60006103e46108aa565b600260005414156108935760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104f3565b60026000556108a2338261182f565b506001600055565b60006108b46103d2565b6003546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b1580156108f757600080fd5b505afa15801561090b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092f919061213a565b61093991906121a9565b600354909150600160a01b900460ff161561095e5760095461095b90826121a9565b90505b60045460055461096e908361218a565b6103e4919061216a565b6001546001600160a01b031633146109d25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104f3565b60026000541415610a255760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104f3565b600260005560075460ff16610aa15760405162461bcd60e51b8152602060048201526024808201527f456d657267656e6379207769746864726177616c206e6f7420696e2070726f6760448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016104f3565b6001600160a01b0381166000908152600860205260409020805415610ba357805460098054600090610ad49084906121a9565b9091555050600254815460405163a9059cbb60e01b81526001600160a01b038581166004830152602482019290925291169063a9059cbb90604401602060405180830381600087803b158015610b2957600080fd5b505af1158015610b3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b619190612106565b5080546040519081526001600160a01b038316907f0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f759060200160405180910390a25b600081600101548260020154610bb99190612152565b90508015610cbe5760035460405163a9059cbb60e01b81526001600160a01b038581166004830152602482018490529091169063a9059cbb90604401602060405180830381600087803b158015610c0f57600080fd5b505af1158015610c23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c479190612106565b508160020154600b6000828254610c5e91906121a9565b90915550506001820154600a8054600090610c7a9084906121a9565b90915550506040518181526001600160a01b038416907fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e04869060200160405180910390a25b6001600160a01b03831660009081526008602052604081208181556001810182905560028101829055600381018290556004810182905590610d036005830182612048565b50506001600055505050565b6001546001600160a01b03163314610d695760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104f3565b60026000541415610dbc5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104f3565b60026000556108a281611d5e565b6001546001600160a01b03163314610e245760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104f3565b6001546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36001805473ffffffffffffffffffffffffffffffffffffffff19169055565b6001546001600160a01b03163314610ed55760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104f3565b60026000541415610f285760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104f3565b600260005560075460ff1615610fa65760405162461bcd60e51b815260206004820152602860248201527f456d657267656e6379207769746864726177616c20616c726561647920696e2060448201527f70726f677265737300000000000000000000000000000000000000000000000060648201526084016104f3565b6007805460ff191660011790556040517fab67a52cf3e6272459da0eeefbf7451145d68a8b18a3d51cd3f0bd7cc16ffe0490600090a16001600055565b600260005414156110365760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104f3565b6002600055600754610100900460ff16156110b95760405162461bcd60e51b815260206004820152603560248201527f5374616b696e672069732074656d706f726172696c79207061757365642c206e60448201527f6f206e6577207374616b6573206163636570746564000000000000000000000060648201526084016104f3565b60075460ff16156111325760405162461bcd60e51b815260206004820152603860248201527f456d657267656e6379207769746864726177616c20696e2070726f677265737360448201527f2c206e6f206e6577207374616b6573206163636570746564000000000000000060648201526084016104f3565b6006548110156111845760405162461bcd60e51b815260206004820152601c60248201527f4d696e696d756d207374616b6520616d6f756e74206e6f74206d65740000000060448201526064016104f3565b8061118d6108aa565b10156112015760405162461bcd60e51b815260206004820152603d60248201527f4e6f7420656e6f7567682072657761726473206c65667420746f20616363657060448201527f74206e6577207374616b657320666f7220676976656e20616d6f756e7400000060648201526084016104f3565b6002546040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018390526001600160a01b03909116906323b872dd90606401602060405180830381600087803b15801561126c57600080fd5b505af1158015611280573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a49190612106565b6112f05760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e736665722062616c616e636500000000000000000060448201526064016104f3565b33600090815260086020526040902061130881611ec9565b60408051808201909152828152426020808301918252600584018054600181810183556000928352928220945160029091029094019384559151920191909155815483918391611359908490612152565b9250508190555081600960008282546113729190612152565b90915550506005546004546000919061138b908561218a565b611395919061216a565b9050600081116113e75760405162461bcd60e51b815260206004820152601260248201527f5a65726f2072657761726420616d6f756e74000000000000000000000000000060448201526064016104f3565b808260010160008282546113fb9190612152565b9250508190555080600a60008282546114149190612152565b909155505042600383015560405183815233907f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d9060200160405180910390a25050600160005550565b600260005414156114b15760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104f3565b60026000556114bf33611d5e565b6001600055565b6001600160a01b03811660009081526008602052604090206002810154906114ed81611f7f565b6114f79083612152565b9392505050565b600260005414156115515760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104f3565b600260009081553381526008602052604090208054156115795761157933826000015461182f565b61158233611d5e565b33600090815260086020526040812081815560018101829055600281018290556003810182905560048101829055906107606005830182612048565b6001546001600160a01b031633146116185760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104f3565b6002600054141561166b5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104f3565b6002600055600181116116e65760405162461bcd60e51b815260206004820152602760248201527f4d696e696d756d207374616b6520616d6f756e74206d7573742062652061742060448201527f6c6561737420310000000000000000000000000000000000000000000000000060648201526084016104f3565b6006556001600055565b6001546001600160a01b0316331461174a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104f3565b6001600160a01b0381166117c65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016104f3565b6001546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000811161187f5760405162461bcd60e51b815260206004820152601a60248201527f43616e6e6f7420756e7374616b65207a65726f20616d6f756e7400000000000060448201526064016104f3565b6001600160a01b03821660009081526008602052604090206118a081611ec9565b600481015482905b6005830154811015611b01578260050181815481106118d757634e487b7160e01b600052603260045260246000fd5b906000526020600020906002020160000154600014156118f657611aef565b6119046301e13380426121a9565b83600501828154811061192757634e487b7160e01b600052603260045260246000fd5b90600052602060002090600202016001015411156119ad5760405162461bcd60e51b815260206004820152603d60248201527f556e7374616b696e67206973206f6e6c7920616c6c6f7765642061667465722060448201527f746865206c6f636b656420706572696f6420686173206578706972656400000060648201526084016104f3565b818360050182815481106119d157634e487b7160e01b600052603260045260246000fd5b9060005260206000209060020201600001541115611a3c5781836005018281548110611a0d57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600202016000016000828254611a2d91906121a9565b9091555060009250611b019050565b826005018181548110611a5f57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600202016000015482611a7c91906121a9565b91506000836005018281548110611aa357634e487b7160e01b600052603260045260246000fd5b600091825260209091206002909102015560058301805482908110611ad857634e487b7160e01b600052603260045260246000fd5b600091825260208220600290910201818155600101555b80611af9816121c0565b9150506118a8565b8115611b755760405162461bcd60e51b815260206004820152603e60248201527f4e6f7420656e6f756768207374616b65642062616c616e6365206c656674207460448201527f6f20756e7374616b6520616c6c206f662077616e74656420616d6f756e74000060648201526084016104f3565b60048301819055825484908490600090611b909084906121a9565b925050819055508360096000828254611ba991906121a9565b9091555050600183015415801590611bc45750600583015481145b15611c2c578260010154836002016000828254611be19190612152565b90915550506001830154600b8054600090611bfd908490612152565b90915550506001830154600a8054600090611c199084906121a9565b9091555050600060018401554260038401555b60025460405163a9059cbb60e01b8152336004820152602481018690526001600160a01b039091169063a9059cbb90604401602060405180830381600087803b158015611c7857600080fd5b505af1158015611c8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cb09190612106565b611d225760405162461bcd60e51b815260206004820152602f60248201527f5472616e7366657272696e67207374616b656420746f6b656e206261636b207460448201527f6f2073656e646572206661696c6564000000000000000000000000000000000060648201526084016104f3565b60405184815233907f0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f759060200160405180910390a25050505050565b6001600160a01b0381166000908152600860205260409020611d7f81611ec9565b600281015480611d8e57505050565b6000826002018190555080600b6000828254611daa91906121a9565b909155505060035460405163a9059cbb60e01b81526001600160a01b038581166004830152602482018490529091169063a9059cbb90604401602060405180830381600087803b158015611dfd57600080fd5b505af1158015611e11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e359190612106565b611e815760405162461bcd60e51b815260206004820152601560248201527f53656e64696e6720726577617264206661696c6564000000000000000000000060448201526064016104f3565b826001600160a01b03167fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e048682604051611ebc91815260200190565b60405180910390a2505050565b6000611ed482611f7f565b90508015611f7b5780826002016000828254611ef09190612152565b9250508190555080600b6000828254611f099190612152565b90915550506001820154811115611f41578160010154600a6000828254611f3091906121a9565b909155505060006001830155611f74565b80826001016000828254611f5591906121a9565b9250508190555080600a6000828254611f6e91906121a9565b90915550505b4260038301555b5050565b6000816003015460001480611f975750428260030154145b15611fa457506000919050565b6000826003015442611fb691906121a9565b90506301e13380600554826004548660000154611fd3919061218a565b611fdd919061218a565b611fe7919061216a565b611ff1919061216a565b9150826001015482111561204257600083600101548361201191906121a9565b9050600061201d6103e9565b90508082111561203f578061203283866121a9565b61203c9190612152565b93505b50505b50919050565b5080546000825560020290600052602060002090810190612069919061206c565b50565b5b80821115612087576000808255600182015560020161206d565b5090565b80356001600160a01b03811681146120a257600080fd5b919050565b6000602082840312156120b8578081fd5b6114f78261208b565b600080604083850312156120d3578081fd5b6120dc8361208b565b946020939093013593505050565b6000602082840312156120fb578081fd5b81356114f7816121f1565b600060208284031215612117578081fd5b81516114f7816121f1565b600060208284031215612133578081fd5b5035919050565b60006020828403121561214b578081fd5b5051919050565b60008219821115612165576121656121db565b500190565b60008261218557634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156121a4576121a46121db565b500290565b6000828210156121bb576121bb6121db565b500390565b60006000198214156121d4576121d46121db565b5060010190565b634e487b7160e01b600052601160045260246000fd5b801515811461206957600080fdfea2646970667358221220848f26d4af3094a0ddb9c266f46ea653937f64727fedeb81bface72bf68d990e64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101e55760003560e01c80638da5cb5b1161010f578063dedfbbfa116100a2578063f188768411610071578063f18876841461039a578063f2fde38b146103a3578063f7c618c1146103b6578063fe961f61146103c957600080fd5b8063dedfbbfa14610350578063e8c33f631461036c578063e9fad8ee1461037f578063eb4af0451461038757600080fd5b8063aeec96fa116100de578063aeec96fa14610343578063b3d6e11914610350578063b88a802f1461035b578063cdd432d01461036357600080fd5b80638da5cb5b146102ee57806398807d84146102ff5780639a90a8e114610328578063a694fc3a1461033057600080fd5b80633f90855111610187578063715018a611610156578063715018a6146102a9578063728d2b6a146102b157806372f702f3146102ba5780638509a001146102e557600080fd5b80633f908551146102595780634ff09273146102615780635c2939c7146102745780635c975abb1461028757600080fd5b806316c38b3c116101c357806316c38b3c1461022257806317653e07146102355780632e17de781461023d578063315a82f91461025057600080fd5b806302653a6b146101ea57806302c3ef3b1461020557806306b091f91461020d575b600080fd5b6101f26103d2565b6040519081526020015b60405180910390f35b6101f26103e9565b61022061021b3660046120c1565b61049d565b005b6102206102303660046120ea565b61076a565b6101f2610836565b61022061024b366004612122565b610840565b6101f2600a5481565b6101f26108aa565b61022061026f3660046120a7565b610978565b6102206102823660046120a7565b610d0f565b60075461029990610100900460ff1681565b60405190151581526020016101fc565b610220610dca565b6101f2600b5481565b6002546102cd906001600160a01b031681565b6040516001600160a01b0390911681526020016101fc565b6101f260055481565b6001546001600160a01b03166102cd565b6101f261030d3660046120a7565b6001600160a01b031660009081526008602052604090205490565b610220610e7b565b61022061033e366004612122565b610fe3565b6007546102999060ff1681565b6101f26301e1338081565b61022061145e565b6101f260045481565b6101f261037a3660046120a7565b6114c6565b6102206114fe565b610220610395366004612122565b6115be565b6101f260065481565b6102206103b13660046120a7565b6116f0565b6003546102cd906001600160a01b031681565b6101f260095481565b6000600a54600b546103e49190612152565b905090565b60006103f36103d2565b6003546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561043657600080fd5b505afa15801561044a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046e919061213a565b61047891906121a9565b600354909150600160a01b900460ff161561049a576009546103e490826121a9565b90565b6001546001600160a01b031633146104fc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6002600054141561054f5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104f3565b60026000556003546001600160a01b03838116911614156105ec576105726103e9565b8111156105e75760405162461bcd60e51b815260206004820152603360248201527f43616e206f6e6c7920776974686472617720757020746f2062616c616e63652060448201527f6d696e7573206c6f636b656420616d6f756e740000000000000000000000000060648201526084016104f3565b6106e0565b6002546001600160a01b03838116911614156106e0576009546002546040516370a0823160e01b8152306004820152600092916001600160a01b0316906370a082319060240160206040518083038186803b15801561064a57600080fd5b505afa15801561065e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610682919061213a565b61068c91906121a9565b9050808211156106de5760405162461bcd60e51b815260206004820152601d60248201527f43616e6e6f74207769746864726177207374616b656420746f6b656e7300000060448201526064016104f3565b505b60405163a9059cbb60e01b8152336004820152602481018290526001600160a01b0383169063a9059cbb90604401602060405180830381600087803b15801561072857600080fd5b505af115801561073c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107609190612106565b5050600160005550565b6001546001600160a01b031633146107c45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104f3565b600260005414156108175760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104f3565b600780549115156101000261ff00199092169190911790556001600055565b60006103e46108aa565b600260005414156108935760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104f3565b60026000556108a2338261182f565b506001600055565b60006108b46103d2565b6003546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b1580156108f757600080fd5b505afa15801561090b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092f919061213a565b61093991906121a9565b600354909150600160a01b900460ff161561095e5760095461095b90826121a9565b90505b60045460055461096e908361218a565b6103e4919061216a565b6001546001600160a01b031633146109d25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104f3565b60026000541415610a255760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104f3565b600260005560075460ff16610aa15760405162461bcd60e51b8152602060048201526024808201527f456d657267656e6379207769746864726177616c206e6f7420696e2070726f6760448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016104f3565b6001600160a01b0381166000908152600860205260409020805415610ba357805460098054600090610ad49084906121a9565b9091555050600254815460405163a9059cbb60e01b81526001600160a01b038581166004830152602482019290925291169063a9059cbb90604401602060405180830381600087803b158015610b2957600080fd5b505af1158015610b3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b619190612106565b5080546040519081526001600160a01b038316907f0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f759060200160405180910390a25b600081600101548260020154610bb99190612152565b90508015610cbe5760035460405163a9059cbb60e01b81526001600160a01b038581166004830152602482018490529091169063a9059cbb90604401602060405180830381600087803b158015610c0f57600080fd5b505af1158015610c23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c479190612106565b508160020154600b6000828254610c5e91906121a9565b90915550506001820154600a8054600090610c7a9084906121a9565b90915550506040518181526001600160a01b038416907fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e04869060200160405180910390a25b6001600160a01b03831660009081526008602052604081208181556001810182905560028101829055600381018290556004810182905590610d036005830182612048565b50506001600055505050565b6001546001600160a01b03163314610d695760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104f3565b60026000541415610dbc5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104f3565b60026000556108a281611d5e565b6001546001600160a01b03163314610e245760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104f3565b6001546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36001805473ffffffffffffffffffffffffffffffffffffffff19169055565b6001546001600160a01b03163314610ed55760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104f3565b60026000541415610f285760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104f3565b600260005560075460ff1615610fa65760405162461bcd60e51b815260206004820152602860248201527f456d657267656e6379207769746864726177616c20616c726561647920696e2060448201527f70726f677265737300000000000000000000000000000000000000000000000060648201526084016104f3565b6007805460ff191660011790556040517fab67a52cf3e6272459da0eeefbf7451145d68a8b18a3d51cd3f0bd7cc16ffe0490600090a16001600055565b600260005414156110365760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104f3565b6002600055600754610100900460ff16156110b95760405162461bcd60e51b815260206004820152603560248201527f5374616b696e672069732074656d706f726172696c79207061757365642c206e60448201527f6f206e6577207374616b6573206163636570746564000000000000000000000060648201526084016104f3565b60075460ff16156111325760405162461bcd60e51b815260206004820152603860248201527f456d657267656e6379207769746864726177616c20696e2070726f677265737360448201527f2c206e6f206e6577207374616b6573206163636570746564000000000000000060648201526084016104f3565b6006548110156111845760405162461bcd60e51b815260206004820152601c60248201527f4d696e696d756d207374616b6520616d6f756e74206e6f74206d65740000000060448201526064016104f3565b8061118d6108aa565b10156112015760405162461bcd60e51b815260206004820152603d60248201527f4e6f7420656e6f7567682072657761726473206c65667420746f20616363657060448201527f74206e6577207374616b657320666f7220676976656e20616d6f756e7400000060648201526084016104f3565b6002546040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018390526001600160a01b03909116906323b872dd90606401602060405180830381600087803b15801561126c57600080fd5b505af1158015611280573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a49190612106565b6112f05760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e736665722062616c616e636500000000000000000060448201526064016104f3565b33600090815260086020526040902061130881611ec9565b60408051808201909152828152426020808301918252600584018054600181810183556000928352928220945160029091029094019384559151920191909155815483918391611359908490612152565b9250508190555081600960008282546113729190612152565b90915550506005546004546000919061138b908561218a565b611395919061216a565b9050600081116113e75760405162461bcd60e51b815260206004820152601260248201527f5a65726f2072657761726420616d6f756e74000000000000000000000000000060448201526064016104f3565b808260010160008282546113fb9190612152565b9250508190555080600a60008282546114149190612152565b909155505042600383015560405183815233907f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d9060200160405180910390a25050600160005550565b600260005414156114b15760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104f3565b60026000556114bf33611d5e565b6001600055565b6001600160a01b03811660009081526008602052604090206002810154906114ed81611f7f565b6114f79083612152565b9392505050565b600260005414156115515760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104f3565b600260009081553381526008602052604090208054156115795761157933826000015461182f565b61158233611d5e565b33600090815260086020526040812081815560018101829055600281018290556003810182905560048101829055906107606005830182612048565b6001546001600160a01b031633146116185760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104f3565b6002600054141561166b5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104f3565b6002600055600181116116e65760405162461bcd60e51b815260206004820152602760248201527f4d696e696d756d207374616b6520616d6f756e74206d7573742062652061742060448201527f6c6561737420310000000000000000000000000000000000000000000000000060648201526084016104f3565b6006556001600055565b6001546001600160a01b0316331461174a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104f3565b6001600160a01b0381166117c65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016104f3565b6001546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000811161187f5760405162461bcd60e51b815260206004820152601a60248201527f43616e6e6f7420756e7374616b65207a65726f20616d6f756e7400000000000060448201526064016104f3565b6001600160a01b03821660009081526008602052604090206118a081611ec9565b600481015482905b6005830154811015611b01578260050181815481106118d757634e487b7160e01b600052603260045260246000fd5b906000526020600020906002020160000154600014156118f657611aef565b6119046301e13380426121a9565b83600501828154811061192757634e487b7160e01b600052603260045260246000fd5b90600052602060002090600202016001015411156119ad5760405162461bcd60e51b815260206004820152603d60248201527f556e7374616b696e67206973206f6e6c7920616c6c6f7765642061667465722060448201527f746865206c6f636b656420706572696f6420686173206578706972656400000060648201526084016104f3565b818360050182815481106119d157634e487b7160e01b600052603260045260246000fd5b9060005260206000209060020201600001541115611a3c5781836005018281548110611a0d57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600202016000016000828254611a2d91906121a9565b9091555060009250611b019050565b826005018181548110611a5f57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600202016000015482611a7c91906121a9565b91506000836005018281548110611aa357634e487b7160e01b600052603260045260246000fd5b600091825260209091206002909102015560058301805482908110611ad857634e487b7160e01b600052603260045260246000fd5b600091825260208220600290910201818155600101555b80611af9816121c0565b9150506118a8565b8115611b755760405162461bcd60e51b815260206004820152603e60248201527f4e6f7420656e6f756768207374616b65642062616c616e6365206c656674207460448201527f6f20756e7374616b6520616c6c206f662077616e74656420616d6f756e74000060648201526084016104f3565b60048301819055825484908490600090611b909084906121a9565b925050819055508360096000828254611ba991906121a9565b9091555050600183015415801590611bc45750600583015481145b15611c2c578260010154836002016000828254611be19190612152565b90915550506001830154600b8054600090611bfd908490612152565b90915550506001830154600a8054600090611c199084906121a9565b9091555050600060018401554260038401555b60025460405163a9059cbb60e01b8152336004820152602481018690526001600160a01b039091169063a9059cbb90604401602060405180830381600087803b158015611c7857600080fd5b505af1158015611c8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cb09190612106565b611d225760405162461bcd60e51b815260206004820152602f60248201527f5472616e7366657272696e67207374616b656420746f6b656e206261636b207460448201527f6f2073656e646572206661696c6564000000000000000000000000000000000060648201526084016104f3565b60405184815233907f0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f759060200160405180910390a25050505050565b6001600160a01b0381166000908152600860205260409020611d7f81611ec9565b600281015480611d8e57505050565b6000826002018190555080600b6000828254611daa91906121a9565b909155505060035460405163a9059cbb60e01b81526001600160a01b038581166004830152602482018490529091169063a9059cbb90604401602060405180830381600087803b158015611dfd57600080fd5b505af1158015611e11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e359190612106565b611e815760405162461bcd60e51b815260206004820152601560248201527f53656e64696e6720726577617264206661696c6564000000000000000000000060448201526064016104f3565b826001600160a01b03167fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e048682604051611ebc91815260200190565b60405180910390a2505050565b6000611ed482611f7f565b90508015611f7b5780826002016000828254611ef09190612152565b9250508190555080600b6000828254611f099190612152565b90915550506001820154811115611f41578160010154600a6000828254611f3091906121a9565b909155505060006001830155611f74565b80826001016000828254611f5591906121a9565b9250508190555080600a6000828254611f6e91906121a9565b90915550505b4260038301555b5050565b6000816003015460001480611f975750428260030154145b15611fa457506000919050565b6000826003015442611fb691906121a9565b90506301e13380600554826004548660000154611fd3919061218a565b611fdd919061218a565b611fe7919061216a565b611ff1919061216a565b9150826001015482111561204257600083600101548361201191906121a9565b9050600061201d6103e9565b90508082111561203f578061203283866121a9565b61203c9190612152565b93505b50505b50919050565b5080546000825560020290600052602060002090810190612069919061206c565b50565b5b80821115612087576000808255600182015560020161206d565b5090565b80356001600160a01b03811681146120a257600080fd5b919050565b6000602082840312156120b8578081fd5b6114f78261208b565b600080604083850312156120d3578081fd5b6120dc8361208b565b946020939093013593505050565b6000602082840312156120fb578081fd5b81356114f7816121f1565b600060208284031215612117578081fd5b81516114f7816121f1565b600060208284031215612133578081fd5b5035919050565b60006020828403121561214b578081fd5b5051919050565b60008219821115612165576121656121db565b500190565b60008261218557634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156121a4576121a46121db565b500290565b6000828210156121bb576121bb6121db565b500390565b60006000198214156121d4576121d46121db565b5060010190565b634e487b7160e01b600052601160045260246000fd5b801515811461206957600080fdfea2646970667358221220848f26d4af3094a0ddb9c266f46ea653937f64727fedeb81bface72bf68d990e64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 120,
        "contract": "contracts/PayRueStaking.sol:PayRueStaking",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 7,
        "contract": "contracts/PayRueStaking.sol:PayRueStaking",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 840,
        "contract": "contracts/PayRueStaking.sol:PayRueStaking",
        "label": "stakingToken",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)734"
      },
      {
        "astId": 843,
        "contract": "contracts/PayRueStaking.sol:PayRueStaking",
        "label": "rewardToken",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IERC20)734"
      },
      {
        "astId": 845,
        "contract": "contracts/PayRueStaking.sol:PayRueStaking",
        "label": "_stakingTokenIsRewardToken",
        "offset": 20,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 847,
        "contract": "contracts/PayRueStaking.sol:PayRueStaking",
        "label": "rewardNumerator",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 849,
        "contract": "contracts/PayRueStaking.sol:PayRueStaking",
        "label": "rewardDenominator",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 852,
        "contract": "contracts/PayRueStaking.sol:PayRueStaking",
        "label": "minStakeAmount",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 855,
        "contract": "contracts/PayRueStaking.sol:PayRueStaking",
        "label": "emergencyWithdrawalInProgress",
        "offset": 0,
        "slot": "7",
        "type": "t_bool"
      },
      {
        "astId": 858,
        "contract": "contracts/PayRueStaking.sol:PayRueStaking",
        "label": "paused",
        "offset": 1,
        "slot": "7",
        "type": "t_bool"
      },
      {
        "astId": 863,
        "contract": "contracts/PayRueStaking.sol:PayRueStaking",
        "label": "stakingDataByUser",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_struct(UserStakingData)831_storage)"
      },
      {
        "astId": 866,
        "contract": "contracts/PayRueStaking.sol:PayRueStaking",
        "label": "totalAmountStaked",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 869,
        "contract": "contracts/PayRueStaking.sol:PayRueStaking",
        "label": "totalGuaranteedReward",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 872,
        "contract": "contracts/PayRueStaking.sol:PayRueStaking",
        "label": "totalStoredReward",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Stake)816_storage)dyn_storage": {
        "base": "t_struct(Stake)816_storage",
        "encoding": "dynamic_array",
        "label": "struct PayRueStaking.Stake[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)734": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UserStakingData)831_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct PayRueStaking.UserStakingData)",
        "numberOfBytes": "32",
        "value": "t_struct(UserStakingData)831_storage"
      },
      "t_struct(Stake)816_storage": {
        "encoding": "inplace",
        "label": "struct PayRueStaking.Stake",
        "members": [
          {
            "astId": 813,
            "contract": "contracts/PayRueStaking.sol:PayRueStaking",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 815,
            "contract": "contracts/PayRueStaking.sol:PayRueStaking",
            "label": "timestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UserStakingData)831_storage": {
        "encoding": "inplace",
        "label": "struct PayRueStaking.UserStakingData",
        "members": [
          {
            "astId": 818,
            "contract": "contracts/PayRueStaking.sol:PayRueStaking",
            "label": "amountStaked",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 820,
            "contract": "contracts/PayRueStaking.sol:PayRueStaking",
            "label": "guaranteedReward",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 822,
            "contract": "contracts/PayRueStaking.sol:PayRueStaking",
            "label": "storedReward",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 824,
            "contract": "contracts/PayRueStaking.sol:PayRueStaking",
            "label": "storedRewardUpdatedOn",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 826,
            "contract": "contracts/PayRueStaking.sol:PayRueStaking",
            "label": "firstActiveStakeIndex",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 830,
            "contract": "contracts/PayRueStaking.sol:PayRueStaking",
            "label": "stakes",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_struct(Stake)816_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}